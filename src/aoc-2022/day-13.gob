import [_Log_ _Ord_ _Slice_ _File_ _Assert_] := "core"

let Node := [
  on {number: x} [
    on {is node} true
    on {: do f} f{number: x}
    on {order: other}
      other{:
        on {number: n}
          x{order: n}
        on {list: __}
          Node{list: Slice{}, self}{order: other}
      }
  ]
  on {list: xs} [
    on {is node} true
    on {: do f} f{list: xs}
    on {order: other}
      other{:
        on {number: __}
          self{order: Node{list: Slice{}, other}}
        on {list: ns}
          xs{each: {: x index: i}
            if ns{length} <= i then return Ord{>} end
            let n := ns{at: i}
            let ord := x{order: n}
            if ord{<>} then return ord end
          }
          if ns{length} > xs{length} then return Ord{<} end
          Ord{==}
      }
    on {length}
      xs{length}
  ]
]

let parse := [{: str}
  import [_Parser_] := "parse"

  let grammar := [
    on {expr}
      self{number} | self{list}
    on {number}
      Parser{integer}{map: [{: value} Node{number: value}]}
    on {list} Parser{:[
      on {parse: var state}
        (Parser{token: "["}
          >>. grammar{expr}{separate by: Parser{token: ","}}
          .>> Parser{token: "]"}
          |>> [{: xs} Node{list: xs}]
        ){parse: var state}
    ]}
  ]

  let pair := Parser{ok: [top: () bottom: ()]}
    {with: [top] join: grammar{list}}
    {skip: Parser{newline}}
    {with: [bottom] join: grammar{list}}
  
  let pairs := pair{separate by: (Parser{newline} .>> Parser{newline})}

  Parser{parse: str with: pairs}{ok!}
]

let input := "[1,1,3,1,1]
[1,1,5,1,1]

[[1],[2,3,4]]
[[1],4]

[9]
[[8,7,6]]

[[4,4],4,4]
[[4,4],4,4,4]

[7,7,7,7]
[7,7,7]

[]
[3]

[[[]]]
[[]]

[1,[2,[3,[4,[5,6,7]]]],8,9]
[1,[2,[3,[4,[5,6,0]]]],8,9]"

let part_1 := [{: parsed}
  parsed
    {map: {: [_top_ _bottom_] index: i} [order: top{order: bottom} index: i + 1]}
    {filter: {: res} 
      res{order}{<}
    }
    {map: [index]}
    {into: 0 fold: [+]}
]
let part_2 := [{: parsed}
  let top_key := Node{list: Slice{}, Node{list: Slice{}, Node{number: 2}}}
  let bottom_key := Node{list: Slice{}, Node{list: Slice{}, Node{number: 6}}}
  var result := 1
  parsed
    {flat map: {:[_top_ _bottom_]} Slice{}, top, bottom}
    {append: Slice{}, top_key, bottom_key}
    {sort}
    {each: {: value index: i}
      if value{order: top_key}{==} || value{order: bottom_key}{==} then
        set result := result * (i + 1)
      end
    }
    result
]

Assert{: part_1{: parse{: input}} = 13}
Assert{: part_2{: parse{: input}} = 140}

let input := File{read text sync: "./src/aoc-2022/day-13.input.txt"}
let parsed := parse{: input}
Assert{: part_1{: parsed} = 5013}
Assert{: part_2{: parsed} = 25038}

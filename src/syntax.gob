let x := 1
let y := x + -1
let a := x{+: y}{-}

let obj := [
  on {foo} 1
  on {bar: x} x + 2
  on {a: a b: var b} a + b
]

var v := 123
set v := 456
obj{a: 1 b: var v}

let obj := [
  on {do var let on}
    self{bar: 1}
    return
  on {bar: x}
    return x
]
obj{do var let on}

import foo := "native"
let frame := [x]
let [x: x y: y1] := [x: 1 y: 2]
x + y1
let empty := []

let _quoted identifier_ := 123
let [_x_ _y_] := [x: 1 y: 2]

let obj := [
  on {_x_ _y_}
    x + y
]

import [_true_ _false_] := "core"
if true then 123 end
if false then 123 else 456 end
if false then 123 else if true then 456 end
if false then 123 else if true then 456 else 789 end

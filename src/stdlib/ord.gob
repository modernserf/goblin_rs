import [_true_ _false_] := "native"

# - orderable objects respond to {order: other} with an Ord instance
# - operators (note: prefix!) can be used for quickly deriving relevant methods from {order: other}
# - TODO: this should also have min:max: helpers
export let Ord := [
  on {from int: int}
    (int > 0){
      true: Ord{>} 
      false: (int < 0){
        true: Ord{<} 
        false: Ord{==}
      }
    }
  on {<} [
    on {: do f} f{<}
    on {<} true
    on {<=} true
    on {==} false
    on {<>} true
    on {>=} false
    on {>} false
  ]
  on {==} [
    on {: do f} f{==}
    on {<} false
    on {<=} true
    on {==} true
    on {<>} false
    on {>=} true
    on {>} false
  ]
  on {>} [
    on {: do f} f{>}
    on {<} false
    on {<=} false
    on {==} false
    on {<>} true
    on {>=} true
    on {>} true
  ]
]

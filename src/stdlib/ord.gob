import [_true_ _false_] := "core/bool"

# - orderable objects respond to {order: other} with an Ord instance
# - operators (note: prefix!) can be used for quickly deriving relevant methods from {order: other}
export let Ord := [
  on {from int: int}
    if int > 0 then return Ord{>} end
    if int < 0 then return Ord{<} end
    return Ord{==}
  on {: l min: r}
    if <l{order: r} then l else r end
  on {: l max: r}
    if >l{order: r} then l else r end
  on {: target min: min max: max}
    # TODO: check that min <= max
    if <target{order: min} then min
    else if >target{order: max} then max
    else target end
  on {<} [
    on {: do f} f{<}
    on {<} true
    on {<=} true
    on {==} false
    on {<>} true
    on {>=} false
    on {>} false
  ]
  on {==} [
    on {: do f} f{==}
    on {<} false
    on {<=} true
    on {==} true
    on {<>} false
    on {>=} true
    on {>} false
  ]
  on {>} [
    on {: do f} f{>}
    on {<} false
    on {<=} false
    on {==} false
    on {<>} true
    on {>=} true
    on {>} true
  ]
]

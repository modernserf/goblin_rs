import [_Assert_ _true_ _false_ _Ord_] := "core"

# bools
Assert{true: true}
Assert{false: false}

# equality
Assert{true: true = true}
Assert{false: true = false}
Assert{false: true = 1}
Assert{true: true != false}
Assert{true: true != 1}
Assert{false: true != true}

# operators
Assert{true: !false}
Assert{false: !true}
Assert{true: true && true}
Assert{false: true && false}
Assert{true: true || false}
Assert{false: false || false}

# conditionals 
Assert{
  received: if true then "foo" else "bar" end
  expected: "foo"
}
Assert{
  received: if false then "foo" else "bar" end
  expected: "bar"
}

# pattern matching
let res := true{:
  on {true}
    let x := 1
    x + 2
  on {false}
    let y := 2
    y + 3
}
Assert{: res = 3}

# integers
Assert{received: 1 + 1    expected: 2}
let n := 1
Assert{received: -n       expected: -1}
Assert{received: 2 - 3    expected: -1}
Assert{received: 2 * 5    expected: 10}
let n := -1
Assert{received: n{abs}   expected: 1}

# bitwise
Assert{: (3 << 1) = 6}
Assert{: (3 >> 1) = 1}
Assert{: (3 | 6) =  7}
Assert{: (3 & 6) =  2}
Assert{: (3 ^ 6) =  5}

# min max
Assert{: 1{min: 2} = 1}
Assert{: 2{min: 1} = 1}
Assert{: 1{max: 2} = 2}
Assert{: 2{max: 1} = 2}
Assert{: 3{min: 1 max: 5} = 3}
Assert{: 0{min: 1 max: 5} = 1}
Assert{: 9{min: 1 max: 5} = 5}

# floats
Assert{received: 1.0 + 1.0  expected: 2.0}
Assert{received: 0.2 - 0.1  expected: 0.1}
Assert{received: 0.5 * 0.5  expected: 0.25}

let n := 1.0
Assert{received: -n         expected: -1.0}
Assert{received: n{abs}     expected: 1.0}

# int->float conversion
Assert{received: 1 + 1.0  expected: 2.0}
Assert{received: 1.0 + 1  expected: 2.0}

# strict equality
Assert{: 1 = 1}
Assert{: 1.0 = 1.0}
Assert{false: 1 = 2}
Assert{false: 1.0 = 2.0}
# does not convert int->flaot
Assert{false: 1 = 1.0}
Assert{false: 1.0 = 1}
# strict non-equality
Assert{: 1 != 2}
Assert{: 1 != 1.0}
Assert{false: 1 != 1}
Assert{: 1.0 != 2.0}
Assert{: 1.0 != 2}
Assert{false: 1.0 != 1.0}

# comparisons (with conversions)
Assert{: 1 == 1}
Assert{: 1 == 1.0}
Assert{: 1.0 == 1}
Assert{: 1 <> 2}
Assert{: 3 > 1}
Assert{: 3 >= 1}
Assert{: 3 >= 1.0}
Assert{: 3.0 >= 1}

# order
Assert{:  <1{order: 2}}
Assert{: <=1{order: 2}}
Assert{: <>1{order: 2}}
Assert{: ==1{order: 1}}
Assert{: >=1{order: 0}}
Assert{:  >1{order: 0}}
let res := 1{order: 2}{:
  on {<} "<"
  on {==} "=="
  on {>} ">"
}
Assert{: res = "<"}

Assert{panics: [{} 1 + "hello"]}
Assert{panics: [{} 1 + [x: 2]]}
Assert{panics: [{} true && 1]}
Assert{panics: [{} 1.0 + "hello"]}
Assert{panics: [{} 1 & 1.0]}
Assert{panics: [{} 1 >= "hello"]}

# file 
import [_File_ _String_] := "core"
Assert{
  received: File{read text sync: "./src/stdlib/test.txt"}
  expected: "Test file for File module" ++ String{newline}
}